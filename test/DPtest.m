classdef DPtest < matlab.unittest.TestCase
    properties
        OriginalPath
    end
    methods (TestMethodSetup)
        function addDPtoPath(testCase)
            testCase.OriginalPath = path;
            mydir = pwd;
            idcs   = strfind(pwd,'\');
            newdir = mydir(1:idcs(end)-1);
            addpath(fullfile(newdir,'src'))
        end
    end
    methods (TestMethodTeardown)
        function restorePath(testCase)
            path(testCase.OriginalPath);
        end
    end
    methods(Test)
        function testTotalstage(testCase)
            % test if the DP generate the correct number of stages
            % according to theory i.e. totalstage = 3+4+1
            state_tree = DP(3,4);
            actual_totalstage = length(state_tree);
            expected_totalstage = 3+4+1;
            testCase.verifyEqual(actual_totalstage,expected_totalstage)
        end
        function testTotalstate(testCase)
           % test if the total number of states generated by DP is
           % accordning to theory i.e. totalstate = 2*n*m+n+m+1
           n = 3; m = 5;
           state_tree = DP(n,m);
           actual_totalstate = 0;
           for i = 1:length(state_tree) 
                actual_totalstate = actual_totalstate + size(state_tree{i},1);
           end
           expected_totalstate = 2*n*m+n+m+1;
           testCase.verifyEqual(actual_totalstate, expected_totalstate)
        end
        function testFinalState(testCase)
           % Test if the FinalState generated by DP is according to theory
           % i.e. [n,m,1] and [n,m,2]
           n = 7; m = 4;
           state_tree = DP(n,m);
           actual_finalstate = state_tree{n+m+1}(1).state;
           expected_finalstate = [n m 1];
           testCase.verifyEqual(actual_finalstate, expected_finalstate)
        end
    end
end